1. Null program 
    using System;
    namespace HelloApp
    {
        class Program{
            static void Main(string[] args){
                Console.WriteLine("Hello World!");
            }
        }
    }
    
    dotnet new
    dotnet new console
    
    dotnet run
2. Коментарии //   /* ... */
    
2. Переменные
    string name = "Tom";
    '\n' - перевод строки
    '\t' - табуляция
    '\' - обратный слеш
    
    '\x', после которых идет шестнадцатеричный код символа из таблицы ASCII
    Console.WriteLine('\x78');    // x
    
     '\u', после которых идет шестнадцатеричный код Unicode.
     Console.WriteLine('\u0420');    // Р
     Console.WriteLine('\u0421');    // С
     
     Console.WriteLine(0b11);        // 3
     Console.WriteLine(0b1011);      // 11
     
     Console.WriteLine(0x0A);    // 10
     Console.WriteLine(0xFF);    // 255
     
     Console.WriteLine(3.2e3);   // по сути равно 3.2 * 10<sup>3</sup> = 3200
     Console.WriteLine(1.2E-1);  // равно 1.2 * 10<sup>-1</sup> = 0.12
     
     float a = 3.14F;
     float b = 30.6f;
      
     decimal c = 1005.8M;
     decimal d = 334.8m;
     
     uint a = 10U;
     long b = 20L;
     ulong c = 30UL;
     
     Не явная типизация
     var hello = "Hell to World";
     var c = 20;
     Console.WriteLine(c.GetType().ToString());
     Console.WriteLine(hello.GetType().ToString());
     
     double 8 байт 15-16 знаков - для мат
     decimal 16 байт 28 знаков - для денег
     
        bool: хранит значение true или false (логические литералы). Представлен системным типом System.Boolean
        byte: хранит целое число от 0 до 255 и занимает 1 байт. Представлен системным типом System.Byte
        sbyte: хранит целое число от -128 до 127 и занимает 1 байт. Представлен системным типом System.SByte
        short: хранит целое число от -32768 до 32767 и занимает 2 байта. Представлен системным типом System.Int16
        ushort: хранит целое число от 0 до 65535 и занимает 2 байта. Представлен системным типом System.UInt16
        int: хранит целое число от -2147483648 до 2147483647 и занимает 4 байта. Представлен системным типом System.Int32. Все целочисленные литералы по умолчанию представляют значения типа int:
        uint U u: хранит целое число от 0 до 4294967295 и занимает 4 байта. Представлен системным типом System.UInt32
        long L l: хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт. Представлен системным типом System.Int64
        ulong UL: хранит целое число от 0 до 18 446 744 073 709 551 615 и занимает 8 байт. Представлен системным типом System.UInt64
        float F f: хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 и занимает 4 байта. Представлен системным типом System.Single
        double: хранит число с плавающей точкой от ±5.0*10-324 до ±1.7*10308 и занимает 8 байта. Представлен системным типом System.Double
        decimal M m: хранит десятичное дробное число. Если употребляется без десятичной запятой, имеет значение от ±1.0*10-28 до ±7.9228*1028, может хранить 28 знаков после запятой и занимает 16 байт. Представлен системным типом System.Decimal
        char: хранит одиночный символ в кодировке Unicode и занимает 2 байта. Представлен системным типом System.Char. Этому типу соответствуют символьные литералы:
        string: хранит набор символов Unicode. Представлен системным типом System.String. Этому типу соответствуют строковые литералы.
        object: может хранить значение любого типа данных и занимает 4 байта на 32-разрядной платформе и 8 байт на 64-разрядной платформе. Представлен системным типом System.Object, который является базовым для всех других типов и классов .NET.
        object a = 22;
        object b = 3.14;
        object c = "hello code";
        
2.1 Преобразование
    Convert.ToInt32() (преобразует к типу int)
    Convert.ToDouble() (преобразует к типу double)
    Convert.ToDecimal() (преобразует к типу decimal)
    
2.2 Операции
    Арифметические
        +, -, *, /  (если два целых то результат целый), % (остаток), ++ -- ++i i++
        int a = 3;
        int b = 5;
        int c = 40;
        int d = c---b*a; =(c--)-b*a   a=3  b=5  c=39  d=25
        int d = (c-(--b))*a;    // a=3  b=4  c=40  d=108
    
    Логические
        &(логическое умножение and) && (операнды не все вычисляются)
        | (логическое сложение or) || (операнды не все вычисляются)
        ^ (логическое исключающее ИЛИ XOR)
        ~ (логическое отрицание или инверсия)
    
    Отрицательные числа
        int x = 12;
        int y = ~x;
        y += 1;
        Console.WriteLine(y);   // -12
    
    Сдвиг
        x<<y - сдвигает число x влево на y разрядов. Например, 4<<1 сдвигает число 4
        x>>y - сдвигает число x вправо на y разрядов. Например, 16>>1
    
    Присваивания
        Справа на лево
        int a, b, c;
        a = b = c = 34 * 2 / 4; // 17
        
        +=: присваивание после сложения
        -=: присваивание после вычитания
        *=: присваивание после умножения
        /=: присваивание после деления
        %=: присваивание после деления по модулю
        &=: присваивание после поразрядной конъюнкции
        |=: присваивание после поразрядной дизъюнкции
        ^=: присваивание после операции исключающего ИЛИ
        <<=: присваивание после сдвига разрядов влево
        >>=: присваивание после сдвига разрядов вправо
        
        Пример:
        int a = 8;
        int b = 6;
        int c = a += b -= 5;    // 9
        
    Преобразование
        byte a = 4;
        byte b = a + 70;  // ошибка потому что сума всегда int
        
        byte a = 4;
        byte b = (byte)(a + 70);
        
        Не явные преобразования
        byte -> short -> int -> long -> decimal
        int -> double
        short -> float -> double
        char -> int
        
        Ключевое слово checked
        try
        {
            int a = 33;
            int b = 600;
            byte c = checked((byte)(a + b));
            Console.WriteLine(c);
        }
        catch (OverflowException ex)
        {
            Console.WriteLine(ex.Message);
        }


2.3. Условные выражения
    ==, !=, < , > , <=, >=, |, & , || (best), && (best) , !, ^ Операция исключающего ИЛИ. Возвращает true, если либо первый, либо второй операнд (но не одновременно) равны true, иначе возвращает false
