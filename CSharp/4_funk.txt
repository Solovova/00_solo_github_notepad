4. Методы
    [модификаторы] тип_возвращаемого_значения название_метода ([параметры])
    {
        // тело метода
    }
    
    static void SayHello() => Console.WriteLine("Hello");
    static string GetHello() => "hello";
    
    4.1. Параметры методов
        static int Sum(int x, int y)
        {
            return x + y;
        }
        
        int a;
        int b = 9;
        Sum(a, b);  // Ошибка - переменной a не присвоено значение
    4.2. Не обязательные параметры
    
        static int OptionalParam(int x, int y, int z=5, int s=4)
        {
            return x + y + z + s;
        }
        static void Main(string[] args)
        {
            OptionalParam(2, 3);
            OptionalParam(2,3,10);
            Console.ReadKey();
        }
        
    4.3. Именованные параметры
        static int OptionalParam(int x, int y, int z=5, int s=4)
        {
            return x + y + z + s;
        }
        static void Main(string[] args)
        {
            OptionalParam(x:2, y:3);
             
            //Необязательный параметр z использует значение по умолчанию
            OptionalParam(y:2, x:3, s:10);
            Console.ReadKey();
        }
        
    4.4. Передача параметров по ссылке и значению. Выходные параметры ref
        static void Addition(ref int x, int y)
        {
            x += y;
        }
        Addition(ref x, y); // вызов метода
        
    4.5. Выходные параметры. Модификатор out
        static void Sum(int x, int y, out int a)
        {
            a = x + y;
        }
        
        int x = 10;
        int z;
        Sum(x, 15, out z);
        
        Однако в отличие от ref для переменных, которые передаются с ключевым словам out, не требуется инициализация. И кроме того, вызываемый метод должен обязательно присвоить им значение.
        
        Вариант 1:
        int x = 10;
        int area;
        int perimetr;
        GetData(x, 15, out area, out perimetr);
        Console.WriteLine($"Площадь : {area}");
        Console.WriteLine($"Периметр : {perimetr}");
        
        Вариант 2:
        int x = 10;
        GetData(x, 15, out int area, out int perimetr);
        Console.WriteLine($"Площадь : {area}");
        Console.WriteLine($"Периметр : {perimetr}");
        
    4.6. Входные параметры. Модификатор in
        Кроме выходных параметров с модификатором out метод может использовать входные параметры с модификатором in. Модификатор in указывает, что данный параметр будет передаваться в метод по ссылке, однако внутри метода его значение параметра нельзя будет изменить. Например, возьмем следующий метод:
        static void GetData(in int x, int y, out int area, out int perim)
        {
            // x = x + 10; нельзя изменить значение параметра x
            y = y + 10;
            area = x * y;
            perim = (x + y) * 2;
        }
        ???? Можно ли менять значение массива
        В данном случае через параметры x и y в метод передаются значения, но в самом методе можно изменить только значение параметра y, так как параметр x указан с модификатором in.
    
    4.7. Массив параметров и ключевое слово params
            static void Addition(params int[] integers)
            {
                int result = 0;
                for (int i = 0; i < integers.Length; i++)
                {
                    result += integers[i];
                }
                Console.WriteLine(result);
            }
             
            static void Main(string[] args)
            {
                Addition(1, 2, 3, 4, 5);
                 
                int[] array = new int[] { 1, 2, 3, 4 };
                Addition(array);
             
                Addition();
                Console.ReadLine();
            }
            
            //Так работает
            static void Addition( int x, string mes, params int[] integers)
            {}
            Addition(2, "hello", 1, 3, 4);
            
            //Так НЕ работает
            static void Addition(params int[] integers, int x, string mes)
            {}
      4.8. Рекурсия
              static int Fibonachi(int n)
              {
                  if (n == 0 || n == 1)
                  {
                      return n;
                  }
                  else
                  {
                      return Fibonachi(n - 1) + Fibonachi(n - 2);
                  }
              }